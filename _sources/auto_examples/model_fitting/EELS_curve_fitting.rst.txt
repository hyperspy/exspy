
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                     | 14.3k/42.3M [00:00<07:57, 88.5kB/s]      0%|                                      | 45.1k/42.3M [00:00<04:11, 168kB/s]      0%|                                       | 114k/42.3M [00:00<02:23, 293kB/s]      1%|▏                                      | 243k/42.3M [00:00<01:23, 501kB/s]      1%|▍                                      | 519k/42.3M [00:00<00:44, 947kB/s]      3%|▉                                    | 1.06M/42.3M [00:00<00:23, 1.77MB/s]      5%|█▉                                   | 2.15M/42.3M [00:01<00:11, 3.43MB/s]     10%|███▊                                 | 4.35M/42.3M [00:01<00:05, 6.68MB/s]     15%|█████▋                               | 6.46M/42.3M [00:01<00:04, 8.68MB/s]     21%|███████▋                             | 8.74M/42.3M [00:01<00:03, 10.4MB/s]     27%|██████████                           | 11.5M/42.3M [00:01<00:02, 12.2MB/s]     33%|████████████                         | 13.8M/42.3M [00:01<00:02, 12.9MB/s]     39%|██████████████▎                      | 16.3M/42.3M [00:02<00:01, 13.7MB/s]     45%|████████████████▌                    | 18.9M/42.3M [00:02<00:01, 14.4MB/s]     51%|██████████████████▊                  | 21.4M/42.3M [00:02<00:01, 14.7MB/s]     56%|████████████████████▉                | 23.9M/42.3M [00:02<00:01, 14.9MB/s]     63%|███████████████████████▍             | 26.7M/42.3M [00:02<00:00, 15.7MB/s]     70%|█████████████████████████▉           | 29.6M/42.3M [00:02<00:00, 16.3MB/s]     77%|████████████████████████████▎        | 32.4M/42.3M [00:03<00:00, 16.6MB/s]     83%|██████████████████████████████▊      | 35.2M/42.3M [00:03<00:00, 16.9MB/s]     90%|█████████████████████████████████▎   | 38.1M/42.3M [00:03<00:00, 17.1MB/s]     97%|███████████████████████████████████▊ | 41.0M/42.3M [00:03<00:00, 17.3MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 234GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                     | 14.3k/66.1M [00:00<12:32, 87.8kB/s]      0%|                                      | 55.3k/66.1M [00:00<06:07, 180kB/s]      0%|                                       | 131k/66.1M [00:00<03:33, 309kB/s]      0%|▏                                      | 296k/66.1M [00:00<01:52, 587kB/s]      1%|▎                                     | 602k/66.1M [00:00<01:02, 1.05MB/s]      2%|▋                                    | 1.24M/66.1M [00:00<00:31, 2.03MB/s]      4%|█▍                                   | 2.53M/66.1M [00:01<00:15, 3.98MB/s]      8%|██▊                                  | 5.08M/66.1M [00:01<00:07, 7.72MB/s]     12%|████▎                                | 7.81M/66.1M [00:01<00:05, 10.6MB/s]     16%|█████▊                               | 10.3M/66.1M [00:01<00:04, 12.2MB/s]     20%|███████▏                             | 12.9M/66.1M [00:01<00:04, 13.3MB/s]     24%|████████▋                            | 15.6M/66.1M [00:01<00:03, 14.2MB/s]     28%|██████████▏                          | 18.2M/66.1M [00:02<00:03, 14.8MB/s]     32%|███████████▊                         | 21.1M/66.1M [00:02<00:02, 15.9MB/s]     36%|█████████████▍                       | 24.0M/66.1M [00:02<00:02, 16.5MB/s]     41%|███████████████                      | 26.8M/66.1M [00:02<00:02, 16.7MB/s]     45%|████████████████▌                    | 29.5M/66.1M [00:02<00:02, 16.7MB/s]     49%|██████████████████                   | 32.2M/66.1M [00:02<00:02, 16.7MB/s]     53%|███████████████████▌                 | 35.0M/66.1M [00:03<00:01, 16.9MB/s]     57%|█████████████████████▏               | 37.9M/66.1M [00:03<00:01, 17.1MB/s]     61%|██████████████████████▊              | 40.6M/66.1M [00:03<00:01, 17.1MB/s]     66%|████████████████████████▎            | 43.4M/66.1M [00:03<00:01, 17.0MB/s]     70%|█████████████████████████▊           | 46.2M/66.1M [00:03<00:01, 17.1MB/s]     74%|███████████████████████████▍         | 49.0M/66.1M [00:03<00:00, 17.2MB/s]     78%|████████████████████████████▉        | 51.8M/66.1M [00:04<00:00, 17.3MB/s]     83%|██████████████████████████████▌      | 54.6M/66.1M [00:04<00:00, 17.2MB/s]     87%|████████████████████████████████▏    | 57.5M/66.1M [00:04<00:00, 17.3MB/s]     91%|█████████████████████████████████▋   | 60.2M/66.1M [00:04<00:00, 17.1MB/s]     95%|███████████████████████████████████▎ | 63.0M/66.1M [00:04<00:00, 17.3MB/s]    100%|████████████████████████████████████▊| 65.8M/66.1M [00:04<00:00, 17.2MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 381GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 21.637 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
