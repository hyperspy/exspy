
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                     | 15.4k/42.3M [00:00<07:39, 92.0kB/s]      0%|                                      | 42.0k/42.3M [00:00<05:15, 134kB/s]      0%|                                       | 122k/42.3M [00:00<02:23, 294kB/s]      1%|▏                                      | 265k/42.3M [00:00<01:20, 521kB/s]      1%|▌                                      | 564k/42.3M [00:00<00:42, 985kB/s]      3%|█                                    | 1.15M/42.3M [00:00<00:22, 1.86MB/s]      6%|██                                   | 2.35M/42.3M [00:01<00:11, 3.62MB/s]     11%|████▏                                | 4.72M/42.3M [00:01<00:05, 7.03MB/s]     18%|██████▋                              | 7.63M/42.3M [00:01<00:03, 10.3MB/s]     24%|████████▊                            | 10.1M/42.3M [00:01<00:02, 11.6MB/s]     30%|███████████                          | 12.6M/42.3M [00:01<00:02, 12.6MB/s]     36%|█████████████▎                       | 15.2M/42.3M [00:01<00:02, 13.5MB/s]     42%|███████████████▍                     | 17.7M/42.3M [00:02<00:01, 13.9MB/s]     48%|█████████████████▋                   | 20.2M/42.3M [00:02<00:01, 14.2MB/s]     54%|███████████████████▊                 | 22.6M/42.3M [00:02<00:01, 14.4MB/s]     59%|██████████████████████               | 25.1M/42.3M [00:02<00:01, 14.6MB/s]     65%|████████████████████████▏            | 27.6M/42.3M [00:02<00:00, 14.7MB/s]     71%|██████████████████████████▏          | 30.0M/42.3M [00:02<00:00, 14.6MB/s]     77%|████████████████████████████▍        | 32.5M/42.3M [00:03<00:00, 14.7MB/s]     83%|██████████████████████████████▋      | 35.1M/42.3M [00:03<00:00, 15.1MB/s]     89%|████████████████████████████████▉    | 37.6M/42.3M [00:03<00:00, 15.0MB/s]     95%|███████████████████████████████████  | 40.1M/42.3M [00:03<00:00, 15.2MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 163GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                     | 12.3k/66.1M [00:00<14:56, 73.7kB/s]      0%|                                      | 42.0k/66.1M [00:00<08:06, 136kB/s]      0%|                                       | 117k/66.1M [00:00<03:55, 280kB/s]      0%|▏                                      | 250k/66.1M [00:00<02:15, 487kB/s]      1%|▎                                      | 523k/66.1M [00:00<01:12, 908kB/s]      2%|▌                                    | 1.06M/66.1M [00:00<00:38, 1.71MB/s]      3%|█▏                                   | 2.16M/66.1M [00:01<00:19, 3.32MB/s]      7%|██▍                                  | 4.35M/66.1M [00:01<00:09, 6.48MB/s]     10%|███▌                                 | 6.31M/66.1M [00:01<00:07, 8.17MB/s]     13%|████▋                                | 8.44M/66.1M [00:01<00:06, 9.60MB/s]     16%|█████▉                               | 10.5M/66.1M [00:01<00:05, 10.4MB/s]     19%|███████                              | 12.6M/66.1M [00:01<00:04, 11.0MB/s]     22%|████████▏                            | 14.6M/66.1M [00:02<00:04, 11.4MB/s]     25%|█████████▍                           | 16.8M/66.1M [00:02<00:04, 12.1MB/s]     28%|██████████▌                          | 18.8M/66.1M [00:02<00:03, 12.0MB/s]     32%|███████████▊                         | 21.1M/66.1M [00:02<00:03, 12.7MB/s]     36%|█████████████▏                       | 23.6M/66.1M [00:02<00:03, 13.4MB/s]     40%|██████████████▋                      | 26.2M/66.1M [00:02<00:02, 14.0MB/s]     44%|████████████████▏                    | 29.0M/66.1M [00:03<00:02, 14.9MB/s]     48%|█████████████████▋                   | 31.6M/66.1M [00:03<00:02, 15.1MB/s]     52%|███████████████████                  | 34.1M/66.1M [00:03<00:02, 15.2MB/s]     55%|████████████████████▌                | 36.7M/66.1M [00:03<00:01, 15.3MB/s]     59%|██████████████████████               | 39.3M/66.1M [00:03<00:01, 15.5MB/s]     63%|███████████████████████▍             | 42.0M/66.1M [00:03<00:01, 15.6MB/s]     67%|████████████████████████▉            | 44.6M/66.1M [00:04<00:01, 15.7MB/s]     71%|██████████████████████████▍          | 47.2M/66.1M [00:04<00:01, 15.8MB/s]     75%|███████████████████████████▊         | 49.7M/66.1M [00:04<00:01, 15.6MB/s]     79%|█████████████████████████████▏       | 52.2M/66.1M [00:04<00:00, 15.5MB/s]     83%|██████████████████████████████▋      | 54.8M/66.1M [00:04<00:00, 15.6MB/s]     87%|████████████████████████████████▏    | 57.4M/66.1M [00:04<00:00, 15.6MB/s]     91%|█████████████████████████████████▌   | 60.0M/66.1M [00:05<00:00, 15.6MB/s]     95%|███████████████████████████████████  | 62.6M/66.1M [00:05<00:00, 15.7MB/s]     99%|████████████████████████████████████▍| 65.2M/66.1M [00:05<00:00, 15.6MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 332GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.808 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
