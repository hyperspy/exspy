
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                     | 12.3k/42.3M [00:00<07:17, 96.7kB/s]      0%|                                      | 44.0k/42.3M [00:00<03:31, 200kB/s]      0%|                                      | 86.0k/42.3M [00:00<02:32, 276kB/s]      0%|▏                                      | 211k/42.3M [00:00<01:10, 598kB/s]      1%|▍                                     | 447k/42.3M [00:00<00:36, 1.13MB/s]      2%|▊                                     | 922k/42.3M [00:00<00:19, 2.17MB/s]      4%|█▋                                   | 1.89M/42.3M [00:00<00:09, 4.24MB/s]      9%|███▎                                 | 3.80M/42.3M [00:00<00:04, 8.27MB/s]     16%|█████▉                               | 6.82M/42.3M [00:01<00:02, 14.0MB/s]     22%|████████▎                            | 9.51M/42.3M [00:01<00:01, 17.0MB/s]     28%|██████████▎                          | 11.8M/42.3M [00:01<00:01, 18.2MB/s]     34%|████████████▋                        | 14.5M/42.3M [00:01<00:01, 19.8MB/s]     41%|███████████████▏                     | 17.3M/42.3M [00:01<00:01, 21.3MB/s]     47%|█████████████████▍                   | 20.0M/42.3M [00:01<00:01, 22.0MB/s]     53%|███████████████████▊                 | 22.6M/42.3M [00:01<00:00, 22.4MB/s]     60%|██████████████████████▏              | 25.4M/42.3M [00:01<00:00, 23.1MB/s]     67%|████████████████████████▌            | 28.1M/42.3M [00:01<00:00, 23.4MB/s]     73%|██████████████████████████▉          | 30.8M/42.3M [00:02<00:00, 23.5MB/s]     80%|█████████████████████████████▍       | 33.6M/42.3M [00:02<00:00, 24.0MB/s]     86%|███████████████████████████████▉     | 36.5M/42.3M [00:02<00:00, 24.1MB/s]     93%|██████████████████████████████████▎  | 39.2M/42.3M [00:02<00:00, 24.2MB/s]     99%|████████████████████████████████████▋| 41.9M/42.3M [00:02<00:00, 24.2MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 252GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                     | 12.3k/66.1M [00:00<11:11, 98.4kB/s]      0%|                                      | 56.3k/66.1M [00:00<04:10, 264kB/s]      0%|                                       | 135k/66.1M [00:00<02:23, 460kB/s]      0%|▏                                      | 296k/66.1M [00:00<01:18, 839kB/s]      1%|▎                                     | 610k/66.1M [00:00<00:42, 1.54MB/s]      2%|▋                                    | 1.25M/66.1M [00:00<00:22, 2.94MB/s]      4%|█▍                                   | 2.52M/66.1M [00:00<00:11, 5.69MB/s]      8%|██▊                                  | 5.07M/66.1M [00:00<00:05, 11.1MB/s]     12%|████▍                                | 7.89M/66.1M [00:01<00:03, 15.5MB/s]     16%|█████▊                               | 10.3M/66.1M [00:01<00:03, 17.4MB/s]     19%|███████▏                             | 12.9M/66.1M [00:01<00:02, 19.0MB/s]     24%|████████▋                            | 15.5M/66.1M [00:01<00:02, 20.5MB/s]     27%|██████████                           | 18.0M/66.1M [00:01<00:02, 20.8MB/s]     31%|███████████▍                         | 20.5M/66.1M [00:01<00:02, 21.4MB/s]     35%|████████████▉                        | 23.1M/66.1M [00:01<00:01, 22.0MB/s]     39%|██████████████▍                      | 25.7M/66.1M [00:01<00:01, 22.3MB/s]     43%|███████████████▊                     | 28.2M/66.1M [00:01<00:01, 22.4MB/s]     47%|█████████████████▎                   | 30.8M/66.1M [00:02<00:01, 22.6MB/s]     51%|██████████████████▋                  | 33.4M/66.1M [00:02<00:01, 22.8MB/s]     54%|████████████████████▏                | 36.0M/66.1M [00:02<00:01, 22.8MB/s]     58%|█████████████████████▌               | 38.6M/66.1M [00:02<00:01, 22.8MB/s]     62%|███████████████████████              | 41.1M/66.1M [00:02<00:01, 22.9MB/s]     66%|████████████████████████▍            | 43.7M/66.1M [00:02<00:00, 23.0MB/s]     70%|█████████████████████████▉           | 46.4M/66.1M [00:02<00:00, 23.1MB/s]     74%|███████████████████████████▍         | 49.0M/66.1M [00:02<00:00, 23.2MB/s]     78%|████████████████████████████▉        | 51.6M/66.1M [00:02<00:00, 23.2MB/s]     82%|██████████████████████████████▎      | 54.3M/66.1M [00:03<00:00, 23.4MB/s]     86%|███████████████████████████████▊     | 56.9M/66.1M [00:03<00:00, 23.3MB/s]     90%|█████████████████████████████████▎   | 59.5M/66.1M [00:03<00:00, 23.5MB/s]     94%|██████████████████████████████████▊  | 62.1M/66.1M [00:03<00:00, 23.4MB/s]     98%|████████████████████████████████████▎| 64.8M/66.1M [00:03<00:00, 23.5MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 286GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.367 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
