
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                      | 18.4k/42.3M [00:00<04:21, 162kB/s]      0%|                                      | 52.2k/42.3M [00:00<02:53, 243kB/s]      0%|                                       | 125k/42.3M [00:00<01:38, 427kB/s]      1%|▎                                      | 296k/42.3M [00:00<00:48, 860kB/s]      1%|▌                                     | 608k/42.3M [00:00<00:26, 1.55MB/s]      3%|█                                    | 1.25M/42.3M [00:00<00:13, 2.96MB/s]      6%|██▏                                  | 2.52M/42.3M [00:00<00:06, 5.69MB/s]     11%|████▏                                | 4.83M/42.3M [00:00<00:03, 10.4MB/s]     16%|█████▉                               | 6.82M/42.3M [00:01<00:02, 12.7MB/s]     21%|███████▊                             | 9.00M/42.3M [00:01<00:02, 14.8MB/s]     26%|█████████▋                           | 11.1M/42.3M [00:01<00:01, 15.9MB/s]     31%|███████████▌                         | 13.2M/42.3M [00:01<00:01, 16.9MB/s]     36%|█████████████▍                       | 15.3M/42.3M [00:01<00:01, 17.4MB/s]     41%|███████████████▎                     | 17.5M/42.3M [00:01<00:01, 18.0MB/s]     46%|█████████████████▏                   | 19.6M/42.3M [00:01<00:01, 18.3MB/s]     53%|███████████████████▌                 | 22.4M/42.3M [00:01<00:00, 20.2MB/s]     59%|█████████████████████▊               | 24.9M/42.3M [00:01<00:00, 20.9MB/s]     64%|███████████████████████▊             | 27.2M/42.3M [00:02<00:00, 21.0MB/s]     71%|██████████████████████████           | 29.8M/42.3M [00:02<00:00, 21.6MB/s]     77%|████████████████████████████▍        | 32.4M/42.3M [00:02<00:00, 22.1MB/s]     83%|██████████████████████████████▌      | 34.9M/42.3M [00:02<00:00, 22.1MB/s]     89%|████████████████████████████████▊    | 37.5M/42.3M [00:02<00:00, 22.3MB/s]     95%|███████████████████████████████████  | 40.1M/42.3M [00:02<00:00, 22.6MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 180GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                      | 14.3k/66.1M [00:00<08:44, 126kB/s]      0%|                                      | 44.0k/66.1M [00:00<04:59, 221kB/s]      0%|                                       | 114k/66.1M [00:00<02:41, 408kB/s]      0%|▏                                      | 253k/66.1M [00:00<01:28, 742kB/s]      1%|▎                                     | 525k/66.1M [00:00<00:48, 1.35MB/s]      2%|▌                                    | 1.06M/66.1M [00:00<00:25, 2.53MB/s]      3%|█▏                                   | 2.16M/66.1M [00:00<00:13, 4.90MB/s]      7%|██▍                                  | 4.35M/66.1M [00:00<00:06, 9.55MB/s]     10%|███▌                                 | 6.40M/66.1M [00:01<00:04, 12.2MB/s]     13%|████▊                                | 8.67M/66.1M [00:01<00:03, 14.7MB/s]     17%|██████▏                              | 11.1M/66.1M [00:01<00:03, 16.8MB/s]     20%|███████▌                             | 13.5M/66.1M [00:01<00:02, 18.1MB/s]     24%|█████████                            | 16.1M/66.1M [00:01<00:02, 19.6MB/s]     28%|██████████▍                          | 18.6M/66.1M [00:01<00:02, 20.3MB/s]     32%|███████████▊                         | 21.1M/66.1M [00:01<00:02, 21.0MB/s]     36%|█████████████▏                       | 23.6M/66.1M [00:01<00:01, 21.3MB/s]     40%|██████████████▋                      | 26.1M/66.1M [00:01<00:01, 21.7MB/s]     43%|████████████████                     | 28.6M/66.1M [00:02<00:01, 21.8MB/s]     47%|█████████████████▍                   | 31.2M/66.1M [00:02<00:01, 22.1MB/s]     51%|██████████████████▊                  | 33.7M/66.1M [00:02<00:01, 22.1MB/s]     55%|████████████████████▎                | 36.2M/66.1M [00:02<00:01, 22.3MB/s]     59%|█████████████████████▋               | 38.8M/66.1M [00:02<00:01, 22.3MB/s]     63%|███████████████████████▍             | 41.9M/66.1M [00:02<00:01, 24.0MB/s]     68%|████████████████████████▉            | 44.6M/66.1M [00:02<00:00, 24.1MB/s]     72%|██████████████████████████▍          | 47.3M/66.1M [00:02<00:00, 24.0MB/s]     76%|████████████████████████████▏        | 50.3M/66.1M [00:02<00:00, 24.6MB/s]     80%|█████████████████████████████▋       | 53.1M/66.1M [00:03<00:00, 24.9MB/s]     85%|███████████████████████████████▎     | 56.0M/66.1M [00:03<00:00, 23.9MB/s]     89%|████████████████████████████████▉    | 58.8M/66.1M [00:03<00:00, 24.2MB/s]     93%|██████████████████████████████████▎  | 61.2M/66.1M [00:03<00:00, 23.3MB/s]     96%|███████████████████████████████████▋ | 63.7M/66.1M [00:03<00:00, 23.2MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 441GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.175 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
