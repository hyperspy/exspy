
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                      | 14.3k/42.3M [00:00<06:47, 104kB/s]      0%|                                      | 53.2k/42.3M [00:00<02:51, 247kB/s]      1%|▏                                      | 248k/42.3M [00:00<01:00, 699kB/s]      1%|▌                                     | 558k/42.3M [00:00<00:29, 1.42MB/s]      3%|█▏                                   | 1.35M/42.3M [00:00<00:12, 3.40MB/s]      7%|██▍                                  | 2.79M/42.3M [00:00<00:05, 6.70MB/s]     12%|████▌                                | 5.28M/42.3M [00:00<00:03, 12.2MB/s]     18%|██████▌                              | 7.51M/42.3M [00:00<00:02, 15.2MB/s]     24%|████████▋                            | 9.99M/42.3M [00:01<00:01, 18.1MB/s]     29%|██████████▊                          | 12.3M/42.3M [00:01<00:01, 19.6MB/s]     35%|████████████▉                        | 14.8M/42.3M [00:01<00:01, 21.1MB/s]     40%|██████████████▉                      | 17.0M/42.3M [00:01<00:01, 17.9MB/s]     46%|████████████████▉                    | 19.4M/42.3M [00:01<00:01, 19.5MB/s]     52%|███████████████████                  | 21.8M/42.3M [00:01<00:00, 20.8MB/s]     57%|█████████████████████▏               | 24.3M/42.3M [00:01<00:00, 21.8MB/s]     63%|███████████████████████▍             | 26.8M/42.3M [00:01<00:00, 22.7MB/s]     69%|█████████████████████████▌           | 29.3M/42.3M [00:01<00:00, 23.4MB/s]     75%|███████████████████████████▊         | 31.8M/42.3M [00:01<00:00, 24.1MB/s]     81%|█████████████████████████████▉       | 34.3M/42.3M [00:02<00:00, 24.2MB/s]     87%|████████████████████████████████▏    | 36.8M/42.3M [00:02<00:00, 24.6MB/s]     93%|██████████████████████████████████▍  | 39.3M/42.3M [00:02<00:00, 20.5MB/s]     99%|████████████████████████████████████▍| 41.7M/42.3M [00:02<00:00, 21.3MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 253GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                     | 12.3k/66.1M [00:00<11:11, 98.4kB/s]      0%|                                      | 88.1k/66.1M [00:00<03:39, 301kB/s]      1%|▏                                      | 385k/66.1M [00:00<01:11, 915kB/s]      2%|▌                                    | 1.07M/66.1M [00:00<00:25, 2.52MB/s]      3%|█▏                                   | 2.12M/66.1M [00:00<00:13, 4.73MB/s]      6%|██▏                                  | 3.93M/66.1M [00:00<00:07, 8.53MB/s]     11%|████▏                                | 7.48M/66.1M [00:00<00:03, 15.0MB/s]     16%|█████▉                               | 10.5M/66.1M [00:01<00:02, 19.3MB/s]     21%|███████▌                             | 13.6M/66.1M [00:01<00:02, 22.5MB/s]     25%|█████████                            | 16.3M/66.1M [00:01<00:02, 23.7MB/s]     29%|██████████▋                          | 19.2M/66.1M [00:01<00:01, 25.2MB/s]     33%|████████████▏                        | 21.8M/66.1M [00:01<00:01, 23.1MB/s]     37%|█████████████▊                       | 24.6M/66.1M [00:01<00:01, 24.7MB/s]     42%|███████████████▍                     | 27.5M/66.1M [00:01<00:01, 25.8MB/s]     46%|████████████████▉                    | 30.3M/66.1M [00:01<00:01, 26.5MB/s]     50%|██████████████████▌                  | 33.2M/66.1M [00:01<00:01, 27.1MB/s]     54%|████████████████████                 | 35.9M/66.1M [00:02<00:01, 25.2MB/s]     59%|█████████████████████▋               | 38.8M/66.1M [00:02<00:01, 26.2MB/s]     63%|███████████████████████▎             | 41.6M/66.1M [00:02<00:00, 26.6MB/s]     68%|█████████████████████████            | 44.7M/66.1M [00:02<00:00, 27.9MB/s]     72%|██████████████████████████▌          | 47.6M/66.1M [00:02<00:00, 25.3MB/s]     77%|████████████████████████████▍        | 50.7M/66.1M [00:02<00:00, 27.0MB/s]     81%|██████████████████████████████▏      | 53.8M/66.1M [00:02<00:00, 28.2MB/s]     86%|███████████████████████████████▊     | 56.8M/66.1M [00:02<00:00, 28.6MB/s]     90%|█████████████████████████████████▍   | 59.8M/66.1M [00:02<00:00, 28.7MB/s]     95%|███████████████████████████████████  | 62.7M/66.1M [00:02<00:00, 29.0MB/s]    100%|████████████████████████████████████▉| 65.9M/66.1M [00:03<00:00, 29.8MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 435GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.891 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
