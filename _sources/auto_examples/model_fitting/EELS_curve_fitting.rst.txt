
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                     | 14.3k/42.3M [00:00<07:55, 88.9kB/s]      0%|                                      | 53.2k/42.3M [00:00<03:57, 178kB/s]      0%|                                       | 124k/42.3M [00:00<02:23, 294kB/s]      1%|▎                                      | 274k/42.3M [00:00<01:16, 547kB/s]      1%|▌                                     | 569k/42.3M [00:00<00:41, 1.01MB/s]      3%|█                                    | 1.16M/42.3M [00:00<00:21, 1.90MB/s]      6%|██                                   | 2.33M/42.3M [00:01<00:10, 3.65MB/s]     11%|████                                 | 4.67M/42.3M [00:01<00:05, 7.08MB/s]     20%|███████▎                             | 8.43M/42.3M [00:01<00:02, 13.7MB/s]     24%|████████▊                            | 10.1M/42.3M [00:01<00:02, 12.8MB/s]     31%|███████████▌                         | 13.2M/42.3M [00:01<00:01, 14.9MB/s]     38%|██████████████▏                      | 16.3M/42.3M [00:01<00:01, 16.2MB/s]     46%|█████████████████                    | 19.5M/42.3M [00:02<00:01, 17.4MB/s]     53%|███████████████████▌                 | 22.3M/42.3M [00:02<00:01, 17.3MB/s]     62%|██████████████████████▊              | 26.1M/42.3M [00:02<00:00, 19.1MB/s]     69%|█████████████████████████▌           | 29.3M/42.3M [00:02<00:00, 21.8MB/s]     75%|███████████████████████████▌         | 31.6M/42.3M [00:02<00:00, 19.9MB/s]     82%|██████████████████████████████▎      | 34.6M/42.3M [00:02<00:00, 19.7MB/s]     88%|████████████████████████████████▌    | 37.2M/42.3M [00:02<00:00, 21.1MB/s]     93%|██████████████████████████████████▍  | 39.4M/42.3M [00:03<00:00, 19.0MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 181GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                     | 12.3k/66.1M [00:00<14:25, 76.4kB/s]      0%|                                      | 48.1k/66.1M [00:00<06:47, 162kB/s]      0%|                                       | 115k/66.1M [00:00<03:58, 276kB/s]      0%|▏                                      | 246k/66.1M [00:00<01:57, 563kB/s]      1%|▎                                     | 520k/66.1M [00:00<01:04, 1.01MB/s]      2%|▌                                    | 1.06M/66.1M [00:00<00:35, 1.85MB/s]      3%|█▏                                   | 2.16M/66.1M [00:01<00:18, 3.52MB/s]      6%|██▍                                  | 4.30M/66.1M [00:01<00:08, 7.65MB/s]      8%|██▉                                  | 5.21M/66.1M [00:01<00:08, 7.20MB/s]     13%|████▋                                | 8.43M/66.1M [00:01<00:05, 11.5MB/s]     18%|██████▍                              | 11.6M/66.1M [00:01<00:03, 14.1MB/s]     22%|████████▎                            | 14.8M/66.1M [00:01<00:03, 15.9MB/s]     27%|██████████                           | 18.1M/66.1M [00:01<00:02, 17.2MB/s]     32%|███████████▉                         | 21.4M/66.1M [00:02<00:02, 18.2MB/s]     37%|█████████████▊                       | 24.7M/66.1M [00:02<00:02, 19.0MB/s]     43%|███████████████▋                     | 28.1M/66.1M [00:02<00:01, 19.5MB/s]     48%|█████████████████▋                   | 31.5M/66.1M [00:02<00:01, 20.0MB/s]     53%|███████████████████▌                 | 34.8M/66.1M [00:02<00:01, 22.8MB/s]     56%|████████████████████▊                | 37.2M/66.1M [00:02<00:01, 20.9MB/s]     60%|██████████████████████               | 39.5M/66.1M [00:02<00:01, 21.2MB/s]     64%|███████████████████████▌             | 42.1M/66.1M [00:03<00:01, 20.2MB/s]     67%|████████████████████████▊            | 44.3M/66.1M [00:03<00:01, 20.8MB/s]     71%|██████████████████████████▍          | 47.2M/66.1M [00:03<00:00, 20.9MB/s]     75%|███████████████████████████▊         | 49.8M/66.1M [00:03<00:00, 21.4MB/s]     79%|█████████████████████████████▏       | 52.2M/66.1M [00:03<00:00, 20.4MB/s]     83%|██████████████████████████████▌      | 54.6M/66.1M [00:03<00:00, 20.9MB/s]     87%|████████████████████████████████▏    | 57.4M/66.1M [00:03<00:00, 21.0MB/s]     91%|█████████████████████████████████▌   | 60.1M/66.1M [00:03<00:00, 21.3MB/s]     95%|███████████████████████████████████  | 62.6M/66.1M [00:04<00:00, 21.0MB/s]     98%|████████████████████████████████████▍| 65.0M/66.1M [00:04<00:00, 20.7MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 288GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 20.702 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
