
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                      | 12.3k/42.3M [00:00<06:09, 114kB/s]      0%|                                      | 46.1k/42.3M [00:00<03:50, 183kB/s]      0%|                                       | 114k/42.3M [00:00<02:17, 306kB/s]      1%|▏                                      | 248k/42.3M [00:00<01:18, 534kB/s]      1%|▍                                      | 501k/42.3M [00:00<00:44, 938kB/s]      2%|▉                                    | 1.04M/42.3M [00:00<00:22, 1.81MB/s]      5%|█▊                                   | 2.10M/42.3M [00:01<00:11, 3.47MB/s]     10%|███▋                                 | 4.23M/42.3M [00:01<00:05, 6.73MB/s]     18%|██████▍                              | 7.42M/42.3M [00:01<00:03, 11.0MB/s]     25%|█████████▏                           | 10.5M/42.3M [00:01<00:02, 13.7MB/s]     32%|███████████▊                         | 13.5M/42.3M [00:01<00:01, 15.4MB/s]     39%|██████████████▍                      | 16.5M/42.3M [00:01<00:01, 16.7MB/s]     48%|█████████████████▌                   | 20.1M/42.3M [00:01<00:01, 18.6MB/s]     56%|████████████████████▋                | 23.7M/42.3M [00:02<00:00, 19.9MB/s]     64%|███████████████████████▌             | 27.0M/42.3M [00:02<00:00, 20.3MB/s]     72%|██████████████████████████▋          | 30.5M/42.3M [00:02<00:00, 20.9MB/s]     81%|█████████████████████████████▊       | 34.1M/42.3M [00:02<00:00, 21.5MB/s]     88%|████████████████████████████████▌    | 37.2M/42.3M [00:02<00:00, 23.7MB/s]     94%|██████████████████████████████████▋  | 39.7M/42.3M [00:02<00:00, 22.9MB/s]     99%|████████████████████████████████████▊| 42.0M/42.3M [00:02<00:00, 20.7MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 281GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                     | 12.3k/66.1M [00:00<14:17, 77.0kB/s]      0%|                                      | 45.1k/66.1M [00:00<07:08, 154kB/s]      0%|                                       | 104k/66.1M [00:00<03:56, 279kB/s]      0%|▏                                      | 252k/66.1M [00:00<01:59, 552kB/s]      1%|▎                                      | 525k/66.1M [00:00<01:06, 992kB/s]      2%|▌                                    | 1.06M/66.1M [00:00<00:35, 1.84MB/s]      3%|█▏                                   | 2.16M/66.1M [00:01<00:18, 3.54MB/s]      7%|██▍                                  | 4.35M/66.1M [00:01<00:08, 6.88MB/s]     11%|████▏                                | 7.52M/66.1M [00:01<00:05, 11.1MB/s]     16%|█████▊                               | 10.3M/66.1M [00:01<00:04, 13.1MB/s]     21%|███████▋                             | 13.7M/66.1M [00:01<00:03, 15.8MB/s]     26%|█████████▍                           | 16.9M/66.1M [00:01<00:02, 17.1MB/s]     30%|███████████                          | 19.9M/66.1M [00:02<00:02, 17.7MB/s]     35%|████████████▊                        | 22.9M/66.1M [00:02<00:02, 18.2MB/s]     39%|██████████████▌                      | 25.9M/66.1M [00:02<00:02, 18.5MB/s]     45%|████████████████▌                    | 29.5M/66.1M [00:02<00:01, 19.7MB/s]     50%|██████████████████▌                  | 33.1M/66.1M [00:02<00:01, 20.8MB/s]     55%|████████████████████▍                | 36.6M/66.1M [00:02<00:01, 21.2MB/s]     61%|██████████████████████▍              | 40.0M/66.1M [00:02<00:01, 21.4MB/s]     66%|████████████████████████▍            | 43.6M/66.1M [00:03<00:01, 21.8MB/s]     71%|██████████████████████████▏          | 46.7M/66.1M [00:03<00:00, 23.7MB/s]     74%|███████████████████████████▌         | 49.1M/66.1M [00:03<00:00, 23.4MB/s]     78%|████████████████████████████▊        | 51.5M/66.1M [00:03<00:00, 20.9MB/s]     81%|██████████████████████████████       | 53.7M/66.1M [00:03<00:00, 20.3MB/s]     86%|███████████████████████████████▋     | 56.6M/66.1M [00:03<00:00, 22.5MB/s]     89%|████████████████████████████████▉    | 58.9M/66.1M [00:03<00:00, 20.0MB/s]     92%|██████████████████████████████████▏  | 61.0M/66.1M [00:03<00:00, 20.1MB/s]     96%|███████████████████████████████████▋ | 63.7M/66.1M [00:04<00:00, 21.0MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 288GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    low_loss = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=low_loss)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=low_loss, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.399 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
