
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                     | 14.3k/42.3M [00:00<08:05, 87.1kB/s]      0%|                                      | 44.0k/42.3M [00:00<04:49, 146kB/s]      0%|                                       | 103k/42.3M [00:00<02:47, 252kB/s]      1%|▏                                      | 231k/42.3M [00:00<01:28, 473kB/s]      1%|▍                                      | 482k/42.3M [00:00<00:47, 878kB/s]      2%|▊                                     | 973k/42.3M [00:00<00:25, 1.64MB/s]      5%|█▋                                   | 1.99M/42.3M [00:01<00:12, 3.21MB/s]      9%|███▍                                 | 4.00M/42.3M [00:01<00:06, 6.26MB/s]     17%|██████▏                              | 7.12M/42.3M [00:01<00:03, 10.4MB/s]     26%|█████████▋                           | 11.0M/42.3M [00:01<00:02, 14.6MB/s]     35%|████████████▊                        | 14.6M/42.3M [00:01<00:01, 17.1MB/s]     42%|███████████████▋                     | 18.0M/42.3M [00:01<00:01, 18.4MB/s]     49%|██████████████████▏                  | 20.7M/42.3M [00:02<00:01, 18.1MB/s]     58%|█████████████████████▎               | 24.4M/42.3M [00:02<00:00, 19.6MB/s]     66%|████████████████████████▍            | 28.0M/42.3M [00:02<00:00, 20.5MB/s]     74%|███████████████████████████▎         | 31.2M/42.3M [00:02<00:00, 20.4MB/s]     81%|█████████████████████████████▉       | 34.2M/42.3M [00:02<00:00, 20.0MB/s]     90%|█████████████████████████████████▏   | 37.9M/42.3M [00:02<00:00, 21.1MB/s]     97%|███████████████████████████████████▊ | 40.9M/42.3M [00:03<00:00, 20.6MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 258GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                     | 14.3k/66.1M [00:00<12:04, 91.2kB/s]      0%|                                      | 44.0k/66.1M [00:00<07:23, 149kB/s]      0%|                                       | 113k/66.1M [00:00<03:55, 281kB/s]      0%|▏                                      | 238k/66.1M [00:00<01:56, 563kB/s]      1%|▏                                      | 419k/66.1M [00:00<01:13, 890kB/s]      1%|▎                                     | 614k/66.1M [00:00<00:54, 1.20MB/s]      2%|▌                                    | 1.06M/66.1M [00:00<00:35, 1.83MB/s]      3%|█▏                                   | 2.14M/66.1M [00:01<00:17, 3.64MB/s]      6%|██▍                                  | 4.29M/66.1M [00:01<00:08, 7.06MB/s]     12%|████▍                                | 7.95M/66.1M [00:01<00:04, 14.0MB/s]     14%|█████▎                               | 9.54M/66.1M [00:01<00:04, 13.8MB/s]     18%|██████▋                              | 11.9M/66.1M [00:01<00:03, 16.0MB/s]     23%|████████▍                            | 15.2M/66.1M [00:01<00:02, 20.4MB/s]     26%|█████████▋                           | 17.3M/66.1M [00:01<00:02, 18.2MB/s]     30%|██████████▉                          | 19.5M/66.1M [00:01<00:02, 18.7MB/s]     33%|████████████▏                        | 21.8M/66.1M [00:02<00:02, 19.1MB/s]     36%|█████████████▎                       | 23.8M/66.1M [00:02<00:02, 19.3MB/s]     40%|██████████████▋                      | 26.2M/66.1M [00:02<00:01, 20.5MB/s]     43%|███████████████▉                     | 28.5M/66.1M [00:02<00:01, 20.0MB/s]     46%|█████████████████                    | 30.5M/66.1M [00:02<00:01, 19.9MB/s]     50%|██████████████████▍                  | 33.0M/66.1M [00:02<00:01, 21.3MB/s]     53%|███████████████████▋                 | 35.2M/66.1M [00:02<00:01, 20.9MB/s]     57%|████████████████████▉                | 37.4M/66.1M [00:02<00:01, 20.7MB/s]     60%|██████████████████████▏              | 39.6M/66.1M [00:02<00:01, 21.2MB/s]     64%|███████████████████████▌             | 42.1M/66.1M [00:03<00:01, 21.7MB/s]     67%|████████████████████████▊            | 44.3M/66.1M [00:03<00:01, 20.5MB/s]     71%|██████████████████████████▎          | 47.0M/66.1M [00:03<00:00, 20.1MB/s]     75%|███████████████████████████▋         | 49.6M/66.1M [00:03<00:00, 21.3MB/s]     79%|█████████████████████████████▏       | 52.1M/66.1M [00:03<00:00, 22.1MB/s]     82%|██████████████████████████████▍      | 54.4M/66.1M [00:03<00:00, 21.6MB/s]     86%|███████████████████████████████▋     | 56.6M/66.1M [00:03<00:00, 21.3MB/s]     89%|█████████████████████████████████    | 59.0M/66.1M [00:03<00:00, 22.2MB/s]     93%|██████████████████████████████████▎  | 61.3M/66.1M [00:03<00:00, 20.4MB/s]     97%|███████████████████████████████████▋ | 63.9M/66.1M [00:04<00:00, 20.5MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 405GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    low_loss = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=low_loss)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=low_loss, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.618 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
