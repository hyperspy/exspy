
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                   | 1.02k/42.3M [00:00<1:20:15, 8.78kB/s]      0%|                                      | 34.8k/42.3M [00:00<04:51, 145kB/s]      0%|                                      | 92.2k/42.3M [00:00<02:46, 253kB/s]      0%|▏                                      | 208k/42.3M [00:00<01:32, 452kB/s]      1%|▍                                      | 438k/42.3M [00:00<00:50, 830kB/s]      2%|▊                                     | 880k/42.3M [00:00<00:27, 1.52MB/s]      4%|█▌                                   | 1.80M/42.3M [00:01<00:13, 2.96MB/s]      9%|███▏                                 | 3.63M/42.3M [00:01<00:06, 5.77MB/s]     16%|█████▉                               | 6.73M/42.3M [00:01<00:03, 9.50MB/s]     22%|███████▉                             | 9.14M/42.3M [00:01<00:02, 11.2MB/s]     29%|██████████▊                          | 12.4M/42.3M [00:01<00:02, 14.0MB/s]     37%|█████████████▋                       | 15.7M/42.3M [00:01<00:01, 16.0MB/s]     44%|████████████████▏                    | 18.5M/42.3M [00:02<00:01, 16.8MB/s]     52%|███████████████████                  | 21.8M/42.3M [00:02<00:01, 18.1MB/s]     58%|█████████████████████▌               | 24.6M/42.3M [00:02<00:00, 17.9MB/s]     67%|████████████████████████▊            | 28.3M/42.3M [00:02<00:00, 19.7MB/s]     73%|███████████████████████████▏         | 31.0M/42.3M [00:02<00:00, 19.0MB/s]     80%|█████████████████████████████▋       | 34.0M/42.3M [00:02<00:00, 18.9MB/s]     88%|████████████████████████████████▍    | 37.1M/42.3M [00:02<00:00, 19.1MB/s]     95%|███████████████████████████████████▎ | 40.4M/42.3M [00:03<00:00, 19.7MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 236GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                     | 5.12k/66.1M [00:00<24:23, 45.2kB/s]      0%|                                      | 34.8k/66.1M [00:00<07:57, 138kB/s]      0%|                                      | 95.2k/66.1M [00:00<04:19, 254kB/s]      0%|                                       | 203k/66.1M [00:00<02:35, 424kB/s]      1%|▎                                      | 433k/66.1M [00:00<01:22, 796kB/s]      1%|▌                                     | 892k/66.1M [00:00<00:43, 1.50MB/s]      3%|█                                    | 1.79M/66.1M [00:01<00:22, 2.84MB/s]      5%|█▉                                   | 3.44M/66.1M [00:01<00:12, 5.21MB/s]     10%|███▊                                 | 6.89M/66.1M [00:01<00:05, 10.2MB/s]     14%|█████▎                               | 9.46M/66.1M [00:01<00:04, 12.0MB/s]     20%|███████▎                             | 13.1M/66.1M [00:01<00:03, 15.3MB/s]     25%|█████████▎                           | 16.6M/66.1M [00:01<00:02, 16.8MB/s]     30%|███████████                          | 19.7M/66.1M [00:02<00:02, 17.7MB/s]     35%|████████████▊                        | 23.0M/66.1M [00:02<00:02, 18.3MB/s]     40%|██████████████▋                      | 26.2M/66.1M [00:02<00:02, 18.9MB/s]     45%|████████████████▌                    | 29.6M/66.1M [00:02<00:01, 19.5MB/s]     51%|██████████████████▋                  | 33.4M/66.1M [00:02<00:01, 20.7MB/s]     55%|████████████████████▌                | 36.6M/66.1M [00:02<00:01, 20.5MB/s]     60%|██████████████████████▎              | 39.9M/66.1M [00:03<00:01, 20.4MB/s]     66%|████████████████████████▎            | 43.4M/66.1M [00:03<00:01, 20.8MB/s]     71%|██████████████████████████▏          | 46.7M/66.1M [00:03<00:00, 23.4MB/s]     74%|███████████████████████████▌         | 49.2M/66.1M [00:03<00:00, 22.0MB/s]     78%|████████████████████████████▊        | 51.4M/66.1M [00:03<00:00, 21.2MB/s]     82%|██████████████████████████████▏      | 54.0M/66.1M [00:03<00:00, 20.7MB/s]     85%|███████████████████████████████▌     | 56.4M/66.1M [00:03<00:00, 21.5MB/s]     89%|████████████████████████████████▉    | 58.8M/66.1M [00:03<00:00, 22.2MB/s]     92%|██████████████████████████████████▏  | 61.1M/66.1M [00:04<00:00, 20.8MB/s]     96%|███████████████████████████████████▍ | 63.2M/66.1M [00:04<00:00, 21.0MB/s]     99%|████████████████████████████████████▋| 65.5M/66.1M [00:04<00:00, 21.5MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 421GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    low_loss = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=low_loss)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=low_loss, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.931 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
