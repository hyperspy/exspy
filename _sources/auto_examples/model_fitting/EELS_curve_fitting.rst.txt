
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                     | 12.3k/42.3M [00:00<08:09, 86.3kB/s]      0%|                                      | 45.1k/42.3M [00:00<03:52, 182kB/s]      0%|                                       | 104k/42.3M [00:00<02:07, 330kB/s]      1%|▏                                      | 223k/42.3M [00:00<01:13, 572kB/s]      1%|▍                                     | 466k/42.3M [00:00<00:39, 1.06MB/s]      2%|▊                                     | 956k/42.3M [00:00<00:20, 2.02MB/s]      5%|█▋                                   | 1.94M/42.3M [00:00<00:10, 3.91MB/s]      9%|███▍                                 | 3.90M/42.3M [00:01<00:05, 7.60MB/s]     16%|█████▉                               | 6.76M/42.3M [00:01<00:02, 12.0MB/s]     24%|████████▉                            | 10.2M/42.3M [00:01<00:01, 16.5MB/s]     33%|████████████▏                        | 13.9M/42.3M [00:01<00:01, 19.2MB/s]     41%|███████████████▎                     | 17.4M/42.3M [00:01<00:01, 21.7MB/s]     51%|██████████████████▊                  | 21.5M/42.3M [00:01<00:00, 24.0MB/s]     60%|██████████████████████▎              | 25.5M/42.3M [00:01<00:00, 25.2MB/s]     70%|█████████████████████████▊           | 29.5M/42.3M [00:01<00:00, 26.3MB/s]     79%|█████████████████████████████▏       | 33.3M/42.3M [00:02<00:00, 29.0MB/s]     86%|███████████████████████████████▊     | 36.3M/42.3M [00:02<00:00, 25.9MB/s]     92%|██████████████████████████████████   | 39.0M/42.3M [00:02<00:00, 24.3MB/s]     98%|████████████████████████████████████▎| 41.4M/42.3M [00:02<00:00, 24.1MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 251GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                      | 15.4k/66.1M [00:00<09:04, 121kB/s]      0%|                                      | 48.1k/66.1M [00:00<05:27, 202kB/s]      0%|                                       | 113k/66.1M [00:00<03:13, 342kB/s]      0%|▏                                      | 233k/66.1M [00:00<01:52, 584kB/s]      1%|▎                                     | 486k/66.1M [00:00<01:00, 1.09MB/s]      2%|▌                                     | 993k/66.1M [00:00<00:31, 2.07MB/s]      3%|█▏                                   | 2.02M/66.1M [00:00<00:15, 4.02MB/s]      6%|██▎                                  | 4.08M/66.1M [00:01<00:07, 7.84MB/s]     12%|████▍                                | 7.84M/66.1M [00:01<00:04, 14.2MB/s]     18%|██████▌                              | 11.6M/66.1M [00:01<00:02, 18.9MB/s]     23%|████████▎                            | 15.0M/66.1M [00:01<00:02, 22.5MB/s]     26%|█████████▋                           | 17.3M/66.1M [00:01<00:02, 22.4MB/s]     30%|███████████                          | 19.8M/66.1M [00:01<00:01, 23.2MB/s]     34%|████████████▍                        | 22.2M/66.1M [00:01<00:01, 22.9MB/s]     37%|█████████████▊                       | 24.8M/66.1M [00:01<00:01, 23.7MB/s]     41%|███████████████▎                     | 27.2M/66.1M [00:01<00:01, 23.9MB/s]     46%|████████████████▊                    | 30.1M/66.1M [00:02<00:01, 25.4MB/s]     50%|██████████████████▎                  | 32.7M/66.1M [00:02<00:01, 25.6MB/s]     53%|███████████████████▊                 | 35.3M/66.1M [00:02<00:01, 23.8MB/s]     57%|█████████████████████                | 37.7M/66.1M [00:02<00:01, 22.2MB/s]     60%|██████████████████████▍              | 40.0M/66.1M [00:02<00:01, 19.5MB/s]     64%|███████████████████████▌             | 42.1M/66.1M [00:02<00:01, 19.9MB/s]     67%|████████████████████████▋            | 44.1M/66.1M [00:02<00:01, 19.9MB/s]     70%|█████████████████████████▊           | 46.2M/66.1M [00:02<00:01, 17.9MB/s]     73%|██████████████████████████▉          | 48.2M/66.1M [00:02<00:00, 18.5MB/s]     76%|████████████████████████████▏        | 50.3M/66.1M [00:03<00:00, 19.3MB/s]     79%|█████████████████████████████▎       | 52.3M/66.1M [00:03<00:00, 19.1MB/s]     83%|██████████████████████████████▋      | 54.8M/66.1M [00:03<00:00, 20.8MB/s]     86%|███████████████████████████████▊     | 56.9M/66.1M [00:03<00:00, 20.8MB/s]     90%|█████████████████████████████████▏   | 59.2M/66.1M [00:03<00:00, 21.4MB/s]     94%|██████████████████████████████████▋  | 61.9M/66.1M [00:03<00:00, 22.9MB/s]     97%|███████████████████████████████████▉ | 64.2M/66.1M [00:03<00:00, 22.5MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 398GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    low_loss = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=low_loss)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=low_loss, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.600 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
