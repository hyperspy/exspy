
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                      | 18.4k/42.3M [00:00<05:47, 121kB/s]      0%|                                      | 56.3k/42.3M [00:00<03:31, 199kB/s]      0%|                                       | 132k/42.3M [00:00<02:03, 340kB/s]      1%|▎                                      | 295k/42.3M [00:00<01:05, 637kB/s]      1%|▌                                     | 609k/42.3M [00:00<00:35, 1.17MB/s]      3%|█                                    | 1.25M/42.3M [00:00<00:18, 2.23MB/s]      6%|██▏                                  | 2.52M/42.3M [00:01<00:09, 4.30MB/s]     12%|████▍                                | 5.06M/42.3M [00:01<00:04, 8.35MB/s]     19%|███████                              | 8.08M/42.3M [00:01<00:02, 13.4MB/s]     23%|████████▌                            | 9.84M/42.3M [00:01<00:02, 14.4MB/s]     27%|██████████                           | 11.5M/42.3M [00:01<00:02, 15.1MB/s]     31%|███████████▌                         | 13.1M/42.3M [00:01<00:01, 15.3MB/s]     37%|█████████████▊                       | 15.8M/42.3M [00:01<00:01, 16.5MB/s]     44%|████████████████▏                    | 18.5M/42.3M [00:01<00:01, 19.1MB/s]     48%|█████████████████▉                   | 20.5M/42.3M [00:01<00:01, 17.3MB/s]     53%|███████████████████▌                 | 22.3M/42.3M [00:02<00:01, 17.3MB/s]     57%|█████████████████████▏               | 24.2M/42.3M [00:02<00:01, 17.8MB/s]     63%|███████████████████████▎             | 26.6M/42.3M [00:02<00:00, 19.6MB/s]     68%|█████████████████████████            | 28.7M/42.3M [00:02<00:00, 17.9MB/s]     72%|██████████████████████████▊          | 30.6M/42.3M [00:02<00:00, 18.0MB/s]     77%|████████████████████████████▍        | 32.5M/42.3M [00:02<00:00, 18.1MB/s]     82%|██████████████████████████████▍      | 34.9M/42.3M [00:02<00:00, 19.6MB/s]     87%|████████████████████████████████▏    | 36.8M/42.3M [00:02<00:00, 19.5MB/s]     92%|█████████████████████████████████▉   | 38.8M/42.3M [00:02<00:00, 18.8MB/s]     97%|███████████████████████████████████▊ | 41.0M/42.3M [00:03<00:00, 17.5MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 179GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                      | 18.4k/66.1M [00:00<08:58, 123kB/s]      0%|                                      | 50.2k/66.1M [00:00<06:14, 176kB/s]      0%|                                       | 133k/66.1M [00:00<03:08, 351kB/s]      0%|▏                                      | 291k/66.1M [00:00<01:44, 631kB/s]      1%|▎                                     | 615k/66.1M [00:00<00:54, 1.19MB/s]      2%|▋                                    | 1.25M/66.1M [00:00<00:28, 2.25MB/s]      4%|█▍                                   | 2.53M/66.1M [00:01<00:14, 4.32MB/s]      8%|██▊                                  | 5.08M/66.1M [00:01<00:07, 8.42MB/s]     12%|████▎                                | 7.79M/66.1M [00:01<00:05, 11.5MB/s]     16%|█████▋                               | 10.2M/66.1M [00:01<00:04, 13.1MB/s]     19%|███████▏                             | 12.7M/66.1M [00:01<00:03, 14.2MB/s]     23%|████████▌                            | 15.3M/66.1M [00:01<00:03, 15.1MB/s]     27%|█████████▉                           | 17.8M/66.1M [00:01<00:03, 15.7MB/s]     31%|███████████▎                         | 20.3M/66.1M [00:02<00:02, 16.1MB/s]     35%|████████████▊                        | 22.9M/66.1M [00:02<00:02, 16.4MB/s]     38%|██████████████▏                      | 25.4M/66.1M [00:02<00:02, 16.6MB/s]     42%|███████████████▋                     | 27.9M/66.1M [00:02<00:02, 16.7MB/s]     46%|█████████████████                    | 30.5M/66.1M [00:02<00:02, 16.8MB/s]     50%|██████████████████▍                  | 33.0M/66.1M [00:02<00:01, 16.9MB/s]     54%|███████████████████▉                 | 35.5M/66.1M [00:02<00:01, 16.9MB/s]     58%|█████████████████████▎               | 38.1M/66.1M [00:03<00:01, 17.0MB/s]     62%|██████████████████████▊              | 40.7M/66.1M [00:03<00:01, 17.2MB/s]     65%|████████████████████████▏            | 43.3M/66.1M [00:03<00:01, 17.3MB/s]     70%|█████████████████████████▋           | 46.0M/66.1M [00:03<00:01, 17.5MB/s]     73%|███████████████████████████▏         | 48.6M/66.1M [00:03<00:00, 17.5MB/s]     77%|████████████████████████████▋        | 51.2M/66.1M [00:03<00:00, 17.6MB/s]     82%|██████████████████████████████▏      | 53.9M/66.1M [00:04<00:00, 17.7MB/s]     86%|███████████████████████████████▋     | 56.6M/66.1M [00:04<00:00, 17.8MB/s]     89%|████████████████████████████████▉    | 58.9M/66.1M [00:04<00:00, 18.9MB/s]     92%|██████████████████████████████████   | 60.8M/66.1M [00:04<00:00, 17.4MB/s]     95%|███████████████████████████████████  | 62.6M/66.1M [00:04<00:00, 11.8MB/s]     98%|████████████████████████████████████▍| 65.1M/66.1M [00:04<00:00, 13.2MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 323GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 21.182 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
