
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                      | 18.4k/42.3M [00:00<04:20, 162kB/s]      0%|                                      | 54.3k/42.3M [00:00<02:46, 254kB/s]      0%|                                       | 135k/42.3M [00:00<01:30, 466kB/s]      1%|▎                                      | 287k/42.3M [00:00<00:51, 813kB/s]      1%|▌                                     | 601k/42.3M [00:00<00:27, 1.53MB/s]      3%|█                                    | 1.24M/42.3M [00:00<00:13, 2.94MB/s]      6%|██▏                                  | 2.51M/42.3M [00:00<00:06, 5.68MB/s]     12%|████▍                                | 5.07M/42.3M [00:00<00:03, 11.1MB/s]     19%|███████▏                             | 8.16M/42.3M [00:01<00:02, 16.2MB/s]     26%|█████████▋                           | 11.0M/42.3M [00:01<00:01, 19.1MB/s]     32%|███████████▉                         | 13.6M/42.3M [00:01<00:01, 20.3MB/s]     38%|██████████████▏                      | 16.2M/42.3M [00:01<00:01, 21.1MB/s]     45%|████████████████▌                    | 18.9M/42.3M [00:01<00:01, 21.9MB/s]     51%|██████████████████▉                  | 21.6M/42.3M [00:01<00:00, 22.8MB/s]     58%|█████████████████████▍               | 24.5M/42.3M [00:01<00:00, 23.4MB/s]     64%|███████████████████████▋             | 27.1M/42.3M [00:01<00:00, 23.4MB/s]     70%|██████████████████████████           | 29.7M/42.3M [00:01<00:00, 23.5MB/s]     77%|████████████████████████████▍        | 32.5M/42.3M [00:02<00:00, 23.8MB/s]     84%|██████████████████████████████▉      | 35.3M/42.3M [00:02<00:00, 24.2MB/s]     90%|█████████████████████████████████▎   | 38.0M/42.3M [00:02<00:00, 24.2MB/s]     96%|███████████████████████████████████▌ | 40.7M/42.3M [00:02<00:00, 24.0MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 281GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                      | 18.4k/66.1M [00:00<06:49, 161kB/s]      0%|                                      | 50.2k/66.1M [00:00<04:47, 230kB/s]      0%|                                       | 135k/66.1M [00:00<02:23, 459kB/s]      0%|▏                                      | 293k/66.1M [00:00<01:19, 824kB/s]      1%|▎                                     | 602k/66.1M [00:00<00:43, 1.51MB/s]      2%|▋                                    | 1.24M/66.1M [00:00<00:22, 2.90MB/s]      4%|█▍                                   | 2.53M/66.1M [00:00<00:11, 5.67MB/s]      8%|██▊                                  | 5.08M/66.1M [00:00<00:05, 11.0MB/s]     12%|████▎                                | 7.76M/66.1M [00:01<00:03, 15.0MB/s]     15%|█████▋                               | 10.1M/66.1M [00:01<00:03, 16.8MB/s]     19%|███████                              | 12.5M/66.1M [00:01<00:02, 18.1MB/s]     23%|████████▍                            | 15.1M/66.1M [00:01<00:02, 19.5MB/s]     27%|█████████▊                           | 17.6M/66.1M [00:01<00:02, 20.3MB/s]     30%|███████████▏                         | 20.0M/66.1M [00:01<00:02, 20.6MB/s]     34%|████████████▌                        | 22.4M/66.1M [00:01<00:02, 20.9MB/s]     38%|█████████████▉                       | 24.9M/66.1M [00:01<00:01, 21.3MB/s]     41%|███████████████▎                     | 27.4M/66.1M [00:01<00:01, 21.4MB/s]     45%|████████████████▋                    | 29.8M/66.1M [00:02<00:01, 21.4MB/s]     49%|██████████████████▏                  | 32.4M/66.1M [00:02<00:01, 21.8MB/s]     53%|███████████████████▌                 | 34.9M/66.1M [00:02<00:01, 21.7MB/s]     57%|████████████████████▉                | 37.4M/66.1M [00:02<00:01, 21.8MB/s]     60%|██████████████████████▎              | 39.9M/66.1M [00:02<00:01, 21.9MB/s]     64%|███████████████████████▋             | 42.4M/66.1M [00:02<00:01, 21.9MB/s]     68%|█████████████████████████            | 44.8M/66.1M [00:02<00:00, 21.7MB/s]     72%|██████████████████████████▍          | 47.3M/66.1M [00:02<00:00, 21.9MB/s]     75%|███████████████████████████▉         | 49.8M/66.1M [00:02<00:00, 22.0MB/s]     79%|█████████████████████████████▎       | 52.3M/66.1M [00:03<00:00, 21.9MB/s]     83%|██████████████████████████████▋      | 54.8M/66.1M [00:03<00:00, 22.0MB/s]     87%|████████████████████████████████     | 57.3M/66.1M [00:03<00:00, 22.1MB/s]     91%|█████████████████████████████████▍   | 59.8M/66.1M [00:03<00:00, 22.1MB/s]     94%|██████████████████████████████████▉  | 62.4M/66.1M [00:03<00:00, 22.1MB/s]     98%|████████████████████████████████████▎| 64.9M/66.1M [00:03<00:00, 22.2MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 441GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.739 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
