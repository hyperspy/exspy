
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                      | 14.3k/42.3M [00:00<05:58, 118kB/s]      0%|                                      | 56.3k/42.3M [00:00<02:42, 259kB/s]      0%|                                       | 126k/42.3M [00:00<01:41, 414kB/s]      1%|▎                                      | 288k/42.3M [00:00<00:52, 800kB/s]      1%|▌                                     | 602k/42.3M [00:00<00:27, 1.49MB/s]      3%|█                                    | 1.24M/42.3M [00:00<00:14, 2.85MB/s]      6%|██▏                                  | 2.53M/42.3M [00:00<00:07, 5.57MB/s]     12%|████▍                                | 5.08M/42.3M [00:00<00:03, 10.8MB/s]     19%|███████▏                             | 8.19M/42.3M [00:01<00:02, 15.8MB/s]     25%|█████████▎                           | 10.6M/42.3M [00:01<00:01, 17.5MB/s]     31%|███████████▎                         | 13.0M/42.3M [00:01<00:01, 18.4MB/s]     37%|█████████████▊                       | 15.8M/42.3M [00:01<00:01, 20.1MB/s]     44%|████████████████                     | 18.4M/42.3M [00:01<00:01, 20.9MB/s]     49%|██████████████████▎                  | 20.9M/42.3M [00:01<00:01, 21.0MB/s]     56%|████████████████████▌                | 23.5M/42.3M [00:01<00:00, 21.5MB/s]     62%|██████████████████████▉              | 26.2M/42.3M [00:01<00:00, 22.1MB/s]     68%|█████████████████████████▏           | 28.8M/42.3M [00:01<00:00, 22.2MB/s]     74%|███████████████████████████▍         | 31.4M/42.3M [00:02<00:00, 22.3MB/s]     81%|█████████████████████████████▊       | 34.1M/42.3M [00:02<00:00, 22.7MB/s]     87%|████████████████████████████████▏    | 36.8M/42.3M [00:02<00:00, 22.8MB/s]     93%|██████████████████████████████████▌  | 39.4M/42.3M [00:02<00:00, 22.8MB/s]    100%|████████████████████████████████████▊| 42.1M/42.3M [00:02<00:00, 23.0MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 266GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                      | 15.4k/66.1M [00:00<08:25, 131kB/s]      0%|                                      | 56.3k/66.1M [00:00<04:12, 262kB/s]      0%|                                       | 137k/66.1M [00:00<02:23, 461kB/s]      0%|▏                                      | 297k/66.1M [00:00<01:19, 824kB/s]      1%|▎                                     | 604k/66.1M [00:00<00:44, 1.49MB/s]      2%|▋                                    | 1.24M/66.1M [00:00<00:22, 2.86MB/s]      4%|█▍                                   | 2.53M/66.1M [00:00<00:11, 5.58MB/s]      8%|██▊                                  | 5.08M/66.1M [00:00<00:05, 10.8MB/s]     12%|████▍                                | 8.03M/66.1M [00:01<00:03, 15.3MB/s]     16%|██████                               | 10.8M/66.1M [00:01<00:03, 17.9MB/s]     20%|███████▍                             | 13.3M/66.1M [00:01<00:02, 19.2MB/s]     24%|████████▉                            | 16.0M/66.1M [00:01<00:02, 20.5MB/s]     28%|██████████▌                          | 18.8M/66.1M [00:01<00:02, 21.6MB/s]     33%|████████████                         | 21.5M/66.1M [00:01<00:02, 22.0MB/s]     37%|█████████████▌                       | 24.1M/66.1M [00:01<00:01, 22.3MB/s]     41%|███████████████                      | 26.8M/66.1M [00:01<00:01, 22.6MB/s]     45%|████████████████▊                    | 29.9M/66.1M [00:01<00:01, 23.9MB/s]     50%|██████████████████▎                  | 32.8M/66.1M [00:02<00:01, 24.2MB/s]     54%|███████████████████▉                 | 35.6M/66.1M [00:02<00:01, 24.1MB/s]     58%|█████████████████████▍               | 38.4M/66.1M [00:02<00:01, 24.0MB/s]     62%|███████████████████████              | 41.3M/66.1M [00:02<00:01, 24.5MB/s]     67%|████████████████████████▋            | 44.2M/66.1M [00:02<00:00, 24.6MB/s]     71%|██████████████████████████▍          | 47.1M/66.1M [00:02<00:00, 24.8MB/s]     75%|███████████████████████████▉         | 49.9M/66.1M [00:02<00:00, 24.5MB/s]     80%|█████████████████████████████▌       | 52.8M/66.1M [00:02<00:00, 24.5MB/s]     84%|███████████████████████████████▏     | 55.8M/66.1M [00:03<00:00, 25.0MB/s]     89%|████████████████████████████████▊    | 58.7M/66.1M [00:03<00:00, 25.0MB/s]     93%|██████████████████████████████████▎  | 61.3M/66.1M [00:03<00:00, 24.1MB/s]     97%|███████████████████████████████████▊ | 64.0M/66.1M [00:03<00:00, 23.7MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 275GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.543 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
