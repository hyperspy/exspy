
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_fitting/EELS_curve_fitting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_fitting_EELS_curve_fitting.py:


EELS curve fitting
==================

Performs curve fitting to an EELS spectrum, plots the result and saves it as
png file.

.. GENERATED FROM PYTHON SOURCE LINES 10-32



.. image-sg:: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :alt: coreloss_spectrum Signal
   :srcset: /auto_examples/model_fitting/images/sphx_glr_EELS_curve_fitting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                     | 11.3k/42.3M [00:00<08:13, 85.6kB/s]      0%|                                      | 54.3k/42.3M [00:00<02:49, 249kB/s]      0%|▏                                      | 136k/42.3M [00:00<01:31, 460kB/s]      1%|▎                                      | 298k/42.3M [00:00<00:50, 838kB/s]      1%|▌                                     | 606k/42.3M [00:00<00:27, 1.52MB/s]      3%|█                                    | 1.24M/42.3M [00:00<00:14, 2.91MB/s]      6%|██▏                                  | 2.50M/42.3M [00:00<00:07, 5.61MB/s]     12%|████▍                                | 5.04M/42.3M [00:00<00:03, 11.0MB/s]     19%|███████▏                             | 8.18M/42.3M [00:01<00:02, 16.3MB/s]     25%|█████████▎                           | 10.6M/42.3M [00:01<00:01, 18.6MB/s]     30%|██████████▉                          | 12.5M/42.3M [00:01<00:01, 18.5MB/s]     36%|█████████████▍                       | 15.3M/42.3M [00:01<00:01, 20.5MB/s]     43%|███████████████▉                     | 18.2M/42.3M [00:01<00:01, 22.1MB/s]     50%|██████████████████▍                  | 21.0M/42.3M [00:01<00:00, 22.9MB/s]     56%|████████████████████▋                | 23.7M/42.3M [00:01<00:00, 23.2MB/s]     62%|███████████████████████              | 26.3M/42.3M [00:01<00:00, 23.3MB/s]     69%|█████████████████████████▍           | 29.0M/42.3M [00:01<00:00, 23.6MB/s]     75%|███████████████████████████▉         | 31.9M/42.3M [00:02<00:00, 24.0MB/s]     82%|██████████████████████████████▎      | 34.6M/42.3M [00:02<00:00, 24.2MB/s]     88%|████████████████████████████████▋    | 37.3M/42.3M [00:02<00:00, 24.2MB/s]     95%|███████████████████████████████████  | 40.1M/42.3M [00:02<00:00, 24.2MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 274GB/s]
      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]      0%|                                      | 17.4k/66.1M [00:00<07:16, 151kB/s]      0%|                                      | 51.2k/66.1M [00:00<04:37, 238kB/s]      0%|                                       | 135k/66.1M [00:00<02:20, 468kB/s]      0%|▏                                      | 297k/66.1M [00:00<01:17, 849kB/s]      1%|▎                                     | 606k/66.1M [00:00<00:42, 1.53MB/s]      2%|▋                                    | 1.24M/66.1M [00:00<00:22, 2.93MB/s]      4%|█▍                                   | 2.50M/66.1M [00:00<00:11, 5.62MB/s]      8%|██▊                                  | 5.04M/66.1M [00:00<00:05, 11.0MB/s]     12%|████▌                                | 8.14M/66.1M [00:01<00:03, 16.2MB/s]     16%|█████▉                               | 10.7M/66.1M [00:01<00:03, 18.2MB/s]     20%|███████▍                             | 13.2M/66.1M [00:01<00:02, 19.5MB/s]     24%|████████▉                            | 15.9M/66.1M [00:01<00:02, 20.8MB/s]     28%|██████████▍                          | 18.7M/66.1M [00:01<00:02, 22.0MB/s]     33%|████████████                         | 21.5M/66.1M [00:01<00:01, 22.8MB/s]     37%|█████████████▌                       | 24.2M/66.1M [00:01<00:01, 23.2MB/s]     41%|███████████████                      | 26.9M/66.1M [00:01<00:01, 23.4MB/s]     45%|████████████████▌                    | 29.5M/66.1M [00:01<00:01, 23.4MB/s]     49%|██████████████████                   | 32.3M/66.1M [00:02<00:01, 23.7MB/s]     53%|███████████████████▋                 | 35.1M/66.1M [00:02<00:01, 24.1MB/s]     57%|█████████████████████▏               | 37.8M/66.1M [00:02<00:01, 23.9MB/s]     61%|██████████████████████▌              | 40.4M/66.1M [00:02<00:01, 23.8MB/s]     65%|████████████████████████             | 43.0M/66.1M [00:02<00:00, 23.7MB/s]     69%|█████████████████████████▌           | 45.8M/66.1M [00:02<00:00, 23.8MB/s]     73%|███████████████████████████          | 48.4M/66.1M [00:02<00:00, 23.8MB/s]     77%|████████████████████████████▌        | 51.1M/66.1M [00:02<00:00, 23.7MB/s]     81%|██████████████████████████████       | 53.8M/66.1M [00:02<00:00, 23.8MB/s]     86%|███████████████████████████████▋     | 56.5M/66.1M [00:03<00:00, 23.9MB/s]     90%|█████████████████████████████████▏   | 59.2M/66.1M [00:03<00:00, 23.8MB/s]     94%|██████████████████████████████████▋  | 62.0M/66.1M [00:03<00:00, 24.1MB/s]     98%|████████████████████████████████████▏| 64.6M/66.1M [00:03<00:00, 23.9MB/s]      0%|                                              | 0.00/66.1M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 66.1M/66.1M [00:00<00:00, 399GB/s]






|

.. code-block:: Python


    import hyperspy.api as hs

    s = hs.load("coreloss_spectrum.msa", signal_type="EELS")
    ll = hs.load("lowloss_spectrum.msa", signal_type="EELS")

    s.add_elements(("Mn", "O"))
    s.set_microscope_parameters(
        beam_energy=300, convergence_angle=24.6, collection_angle=13.6
    )

    m = s.create_model(low_loss=ll)
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()

    # one can also use the Dirac GOS by specifying the GOS parameter
    m = s.create_model(low_loss=ll, GOS="dirac")
    m.enable_fine_structure()
    m.multifit(kind="smart")
    m.plot()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.039 seconds)


.. _sphx_glr_download_auto_examples_model_fitting_EELS_curve_fitting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EELS_curve_fitting.ipynb <EELS_curve_fitting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EELS_curve_fitting.py <EELS_curve_fitting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EELS_curve_fitting.zip <EELS_curve_fitting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
